// Generated by CoffeeScript 1.10.0
var RSC, _sph_resolution, _team1Lighting, _team2Lighting, _view_radius_default;

RSC = typeof exports !== "undefined" && exports !== null ? exports : function() {
  return this.RSC = {};
};

_sph_resolution = 40;

_view_radius_default = 10;

_team1Lighting = new BABYLON.Color3(1, 0, 0);

_team2Lighting = new BABYLON.Color3(0, 0, 1);

RSC.Game = function(canvas, engine, objects, ID) {
  var camera, camtgt, gravityVector, hexc, i, ini_campos, len, light1, light1Dir, light2, light2Dir, ncol, nmat, np, ns, object, physicsPlugin, scene, setup_position;
  console.log("Setting up game...");
  scene = new BABYLON.Scene(engine);
  scene.clearColor = new BABYLON.Color3(0, 0, 0);
  this.me = null;
  this.shell = null;
  this.players = [];
  setup_position = function(pos, coord) {
    pos.x = coord[0];
    pos.y = coord[1];
    return pos.z = coord[2];
  };
  for (i = 0, len = objects.length; i < len; i++) {
    object = objects[i];
    switch (object.name) {
      case "shell":
        ns = BABYLON.Mesh.CreateSphere("shell", _sph_resolution, object.radius * 2, scene, false, BABYLON.Mesh.DOUBLESIDE);
        nmat = new BABYLON.StandardMaterial("smat", scene);
        ncol = new BABYLON.Color3(0.2, 0.2, 0.2);
        nmat.ambientColor = ncol;
        nmat.diffuseColor = ncol;
        nmat.emissiveColor = new BABYLON.Color3(0.1, 0.1, 0.1);
        nmat.specularColor = new BABYLON.Color3(0, 0, 0);
        ns.material = nmat;
        console.log("shell of radius " + object.radius + " created");
        setup_position(ns.position, object.position);
        this.shell = ns;
        break;
      case "player":
        console.log("Received player ID [ " + object.id + " ]");
        np = BABYLON.Mesh.CreateSphere(object.info.name, _sph_resolution, object.radius * 2, scene);
        setup_position(np.position, object.position);
        nmat = new BABYLON.StandardMaterial("pmat", scene);
        console.log("Player info:");
        console.dir(object);
        hexc = object.info.color;
        ncol = new BABYLON.Color3(((hexc & 0xFF0000) >> 16) / 255, ((hexc & 0x00FF00) >> 8) / 255, (hexc & 0x0000FF) / 255);
        nmat.specularColor = new BABYLON.Color3(0.1, 0.1, 0.1);
        nmat.diffuseColor = new BABYLON.Color3(0.1, 0.1, 0.1);
        nmat.ambientColor = ncol;
        np.material = nmat;
        if (object.id === ID) {
          ini_campos = new BABYLON.Vector3(object.position[0], object.position[1], object.position[2] + 10 * Math.sign(object.position[2]));
          this.me = np;
        }
        this.players.push(np);
    }
  }
  light1Dir = new BABYLON.Vector3(0, 0, +1);
  light1 = new BABYLON.HemisphericLight("teamA", light1Dir, scene);
  light1.intensity = .5;
  light1.diffuse = _team1Lighting;
  light2Dir = new BABYLON.Vector3(0, 0, -1);
  light2 = new BABYLON.HemisphericLight("teamB", light2Dir, scene);
  light2.intensity = .5;
  light2.diffuse = _team2Lighting;
  scene.ambientColor = new BABYLON.Color3(1, 1, 1);
  camera = new BABYLON.FreeCamera("playercam", ini_campos, scene);
  camera.attachControl(canvas, false);
  camtgt = this.me.position.clone();
  camera.setTarget(camtgt);
  gravityVector = new BABYLON.Vector3(0, 0, 0);
  physicsPlugin = new BABYLON.CannonJSPlugin();
  scene.enablePhysics(gravityVector, physicsPlugin);
  return {
    scene: scene,
    me: this.me
  };
};
